package anticope.rejects.modules;

import anticope.rejects.MeteorRejectsAddon;
import anticope.rejects.events.TeleportParticleEvent;
import meteordevelopment.meteorclient.events.entity.player.FinishUsingItemEvent;
import meteordevelopment.meteorclient.events.packets.PacketEvent;
import meteordevelopment.meteorclient.events.render.Render3DEvent;
import meteordevelopment.meteorclient.events.world.TickEvent;
import meteordevelopment.meteorclient.settings.*;
import meteordevelopment.meteorclient.systems.modules.Module;
import meteordevelopment.meteorclient.utils.Utils;
import meteordevelopment.meteorclient.utils.misc.Keybind;
import meteordevelopment.meteorclient.utils.render.RenderUtils;
import meteordevelopment.meteorclient.utils.render.color.SettingColor;
import meteordevelopment.orbit.EventHandler;
import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.play.TeleportConfirmC2SPacket;
import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket;
import net.minecraft.util.math.Vec3d;

import java.util.LinkedList;
import java.util.Queue;

public class ChorusExploit extends Module {
    private final SettingGroup sgGeneral = settings.getDefaultGroup();
    private final SettingGroup sgRender = settings.createGroup("渲染");

    private final Setting<PositionMode> positionMode = sgGeneral.add(new EnumSetting.Builder<PositionMode>()
        .name("位置模式")
        .description("你的传送位置如何计算。")
        .defaultValue(PositionMode.Particle)
        .build()
    );

    private final Setting<Boolean> onItemSwitch = sgGeneral.add(new BoolSetting.Builder()
        .name("切换物品时传送")
        .description("当你切换物品时传送。")
        .defaultValue(true)
        .build()
    );

    private final Setting<Boolean> onDeactivate = sgGeneral.add(new BoolSetting.Builder()
        .name("关闭时传送")
        .description("当模块关闭时传送。")
        .defaultValue(false)
        .build()
    );

    private final Setting<Keybind> onKey = sgGeneral.add(new KeybindSetting.Builder()
        .name("按键传送")
        .description("按下按键时传送。")
        .defaultValue(Keybind.none())
        .action(this::sendPackets)
        .build()
    );

    private final Setting<Boolean> autoTeleport = sgGeneral.add(new BoolSetting.Builder()
        .name("自动传送")
        .description("在固定tick数后自动传送。")
        .defaultValue(false)
        .build()
    );

    private final Setting<Integer> ticksToTeleport = sgGeneral.add(new IntSetting.Builder()
        .name("传送tick数")
        .description("自动传送前等待的tick数。")
        .defaultValue(40)
        .min(0)
        .sliderMax(100)
        .visible(autoTeleport::get)
        .build()
    );

    //render
    private final Setting<Boolean> renderActual = sgRender.add(new BoolSetting.Builder()
        .name("设置位置")
        .description("将你客户端的位置设置为实际位置。")
        .defaultValue(true)
        .build()
    );

    private final Setting<Boolean> fakeplayerOnDestination = sgRender.add(new BoolSetting.Builder()
        .name("目标点假人")
        .description("在目标点创建一个假人。")
        .defaultValue(true)
        .build()
    );

    private final Setting<Boolean> drawLine = sgRender.add(new BoolSetting.Builder()
        .name("绘制线条")
        .description("绘制一条线到你将要到达的位置。")
        .defaultValue(true)
        .build()
    );

    private final Setting<SettingColor> lineColour = sgRender.add(new ColorSetting.Builder()
        .name("线条颜色")
        .description("线条的颜色。")
        .defaultValue(new SettingColor(205, 205, 205, 127))
        .visible(drawLine::get)
        .build()
    );

    private int slot;
    private int delay = 0;
    private boolean ateChorus, sending, gotPosition = false;
    private double posX, posY, posZ, cposX, cposY, cposZ;
    private final Queue<TeleportConfirmC2SPacket> telePackets = new LinkedList<>();


    public ChorusExploit() {
        super(MeteorRejectsAddon.CATEGORY, "紫颂果漏洞", "通过紫颂果延迟传送。");
    }

    @Override
    public void onActivate() {
        ateChorus = false;
        delay = 0;
        telePackets.clear();
        gotPosition = false;
    }

    @Override
    public void onDeactivate() {
        if (Utils.canUpdate() && ateChorus && onDeactivate.get()) {
            sendPackets();
        }
        telePackets.clear();
        gotPosition = false;
    }

    @EventHandler
    private void onPacketSend(PacketEvent.Send event) {
        if (event.packet instanceof TeleportConfirmC2SPacket telepacket && ateChorus && !sending) {
            telePackets.add(telepacket);
            event.cancel();
        }
    }

    @EventHandler
    private void onPacketRecieve(PacketEvent.Receive event) {
        if (event.packet instanceof PlayerPositionLookS2CPacket posPacket && ateChorus) {
            event.setCancelled(true);
            if (positionMode.get() == PositionMode.PosLook) {
                Vec3d pos = posPacket.change().position();
                cposX = pos.x;
                cposY = pos.y;
                cposZ = pos.z;
                gotPosition = true;
            }
        }
    }

    @EventHandler
    private void onTick(TickEvent.Pre event) {
        if (ateChorus) {
            delay++;
            if (!mc.player.getPos().equals(new Vec3d(posX, posY, posZ)) && renderActual.get()) {
                mc.player.setPos(posX, posY, posZ);
            }

            if (autoTeleport.get() && delay >= ticksToTeleport.get()) {
                sendPackets();
            }

            if (onItemSwitch.get() && slot != mc.player.getInventory().selectedSlot) {
                sendPackets();
            }
        }
    }

    @EventHandler
    private void onEat(FinishUsingItemEvent event) {
        if (event.itemStack.getItem().equals(Items.CHORUS_FRUIT)) {
            posX = mc.player.getX();
            posY = mc.player.getY();
            posZ = mc.player.getZ();
            ateChorus = true;
            slot = mc.player.getInventory().selectedSlot;
        }
    }

    @EventHandler
    private void onRender3D(Render3DEvent event) {
        if (drawLine.get() && ateChorus && gotPosition) {
            event.renderer.line(RenderUtils.center.x, RenderUtils.center.y, RenderUtils.center.z, cposX, cposY + 1, cposZ, lineColour.get());
        }
    }

    @EventHandler
    private void onTeleportParticle(TeleportParticleEvent event) {
        if (ateChorus && positionMode.get() == PositionMode.Particle) {
            cposX = event.x;
            cposY = event.y;
            cposZ = event.z;
            gotPosition = true;
        }
    }

    private void sendPackets() {
        sending = true;

        while (!telePackets.isEmpty()) {
            mc.getNetworkHandler().sendPacket(telePackets.poll());
        }

        delay = 0;
        ateChorus = false;
        sending = false;
        gotPosition = false;
    }

    @Override
    public String getInfoString() {
        if (autoTeleport.get() && ateChorus) return String.valueOf(ticksToTeleport.get() - delay);
        return null;
    }

    public enum PositionMode {
        Particle("粒子"),
        PosLook("位置视角"),
        None("无");

        private final String title;

        PositionMode(String title) {
            this.title = title;
        }

        @Override
        public String toString() {
            return title;
        }
    }
}